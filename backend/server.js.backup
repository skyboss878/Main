const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const mongoose = require('mongoose');
const path = require('path');
const rateLimit = require('express-rate-limit');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

const { API_ROUTES } = require('../shared/routes');

const app = express();

// Logging incoming requests
app.use((req, res, next) => {
  console.log(`📥 ${req.method} ${req.originalUrl}`);
  if (req.body && Object.keys(req.body).length) {
    console.log('📦 Body:', req.body);
  }
  next();
});

// Check required environment variables
const requiredEnvs = ['MONGODB_URI', 'OPENAI_API_KEY', 'ELEVENLABS_API_KEY'];
const missingEnvs = requiredEnvs.filter(env => !process.env[env] && !process.env[env.replace('MONGODB_URI', 'MONGO_URI')]);

if (missingEnvs.length > 0) {
  console.error(`❌ CRITICAL: Missing environment variables: ${missingEnvs.join(', ')}`);
  process.exit(1);
}

// Rate limiters
const globalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 200,
  message: { success: false, message: 'Too many requests, please try again later' },
  standardHeaders: true,
  legacyHeaders: false,
});

const aiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 50,
  message: { success: false, message: 'AI service rate limit exceeded' },
  standardHeaders: true,
  legacyHeaders: false,
});

app.use(compression());
// app.use(helmet()); // Uncomment if using in production

// CORS config
app.use(cors({
  origin: process.env.NODE_ENV === 'production'
    ? [process.env.FRONTEND_URL, 'https://yourdomain.com']
    : [
        'http://localhost:3000',
        'http://localhost:3001',
        'http://127.0.0.1:3000',
        'http://192.168.1.26:3000',
        'http://192.168.1.26:5173'
      ],
  credentials: true,
  optionsSuccessStatus: 200,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin']
}));

// Parsers
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Static file hosting
app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
  maxAge: '1d',
  etag: true
}));

// Apply rate limiters
app.use('/api', globalLimiter);
// Commented out: app.use(API_ROUTES.AI, aiLimiter); // no AI route defined yet

// Connect to MongoDB
const mongoUri = process.env.MONGODB_URI || process.env.MONGO_URI;
mongoose.set('strictQuery', true);

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(mongoUri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      bufferCommands: false
    });
    console.log(`✅ MongoDB connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('❌ MongoDB connection error:', error.message);
    process.exit(1);
  }
};
connectDB();

// ✅ ROUTE IMPORTS (based on your clean folder)
const routeFiles = [
  { path: API_ROUTES.AUTH, file: './routes/auth' },
  { path: API_ROUTES.BLOG, file: './routes/blog' },
  { path: API_ROUTES.CAPTION, file: './routes/caption' },
  { path: API_ROUTES.COMMERCIAL, file: './routes/commercial' },
  { path: API_ROUTES.FLYER, file: './routes/flyer' },
  { path: API_ROUTES.FOOD_PROMOS, file: './routes/foodpromos' },
  { path: API_ROUTES.IMAGE_TO_IMAGE, file: './routes/imageToImage' },
  { path: API_ROUTES.PAYMENTS, file: './routes/payments' },
  { path: API_ROUTES.SERVICES, file: './routes/services' },
  { path: API_ROUTES.SOCIAL_MEDIA, file: './routes/social-media' },
  { path: API_ROUTES.TEXT_TO_IMAGE, file: './routes/textToImage' },
  { path: API_ROUTES.TEXT_TO_VIDEO, file: './routes/textToVideo' },
  { path: API_ROUTES.TOURS, file: './routes/tours' },
  { path: API_ROUTES.VIDEOS, file: './routes/videos' },
  { path: API_ROUTES.VOICE, file: './routes/voice' },
];

// for (const { path, file } of routeFiles) {
//   try {
//     const route = require(file);
//     app.use(path, route);
//     console.log(`✅ Loaded route ${path} -> ${file}`);
//   } catch (err) {
//     console.warn(`⚠️ Failed to load route ${path} from ${file}: ${err.message}`);
//   }
// }

// 404 fallback
app.use('*', (req, res) => {
  res.status(404).json({ success: false, message: 'Route not found' });
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});
