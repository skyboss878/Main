const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const mongoose = require('mongoose');
const path = require('path');
const rateLimit = require('express-rate-limit');
const compression = require('compression');
const morgan = require('morgan'); // Ensure morgan is installed (npm install morgan)
require('dotenv').config();

// Ensure shared/routes.js exists and defines API_ROUTES like:
// exports.API_ROUTES = { AI: '/api/ai', AUTH: '/api/auth', VIDEOS: '/api/videos', /* ...other routes */ };
const { API_ROUTES } = require('../shared/routes'); // IMPORTANT: Make sure this path is correct based on your setup

const app = express();

// Debugging middleware (Morgan for logging HTTP requests)
app.use(morgan('dev')); // 'dev' format is concise for development
// General request logger - Morgan is usually sufficient, but keeping for direct body logging if desired
app.use((req, res, next) => {
  // console.log(`📥 ${req.method} ${req.originalUrl}`); // Morgan handles this
  if (req.body && Object.keys(req.body).length) {
    // Log only part of the body to prevent console spam with large payloads
    const bodyPreview = JSON.stringify(req.body).substring(0, 500) + (JSON.stringify(req.body).length > 500 ? '...' : '');
    // console.log('📦 Body:', bodyPreview); // Morgan is cleaner
  }
  next();
});

// Check required environment variables
const requiredEnvs = ['MONGODB_URI', 'OPENAI_API_KEY', 'ELEVENLABS_API_KEY', 'REPLICATE_API_KEY', 'STABILITY_API_KEY', 'JWT_SECRET', 'PAYPAL_CLIENT_ID', 'PAYPAL_CLIENT_SECRET']; // ADDED JWT, PAYPAL KEYS
const missingEnvs = requiredEnvs.filter(env => !process.env[env] && !process.env[env.replace('MONGODB_URI', 'MONGO_URI')]);

if (missingEnvs.length > 0) {
  console.error(`❌ CRITICAL: Missing environment variables: ${missingEnvs.join(', ')}. Please check your .env file.`);
  process.exit(1);
}

// Rate limiters
const globalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 200, // Limit each IP to 200 requests per window
  message: { success: false, message: 'Too many requests, please try again later' },
  standardHeaders: true,
  legacyHeaders: false,
});
const aiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // Limit AI service requests
  message: { success: false, message: 'AI service rate limit exceeded. Please wait and try again.' },
  standardHeaders: true,
  legacyHeaders: false,
});

app.use(compression());
app.use(helmet()); // Enable Helmet for security headers
app.use((req, res, next) => {
  res.setHeader("Content-Security-Policy", "default-src 'self'; connect-src 'self' https://ai-studio-backend-2.onrender.com; script-src 'self'");
  next();
});

// CORS configuration
app.use(cors({
  origin: process.env.NODE_ENV === 'production'
    ? [process.env.FRONTEND_URL, 'https://yourproductiondomain.com'] // !! IMPORTANT: Replace with your actual production frontend URL
    : [
        'http://localhost:3000',
        'http://localhost:3001',
        'http://127.0.0.1:3000',
        'http://192.168.1.26:3000', // Example LAN IP for development
        'http://192.168.1.26:5173'  // Example Vite preview
      ],
  credentials: true,
  optionsSuccessStatus: 200,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin']
}));

// Parsers for request bodies
app.use(express.json({ limit: '50mb' })); // Increased limit for potential large payloads
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Static file hosting for uploads and temporary files
app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
  maxAge: '1d', // Cache uploads for 1 day
  etag: true
}));
// Serve temporary files from the 'temp' directory
app.use('/temp', express.static(path.join(__dirname, 'temp'), {
  maxAge: '1h', // Cache temp files for 1 hour
  etag: true
}));

// Apply rate limiters to API routes
console.log('🔧 Applying rate limiters...');
app.use('/api', globalLimiter);
app.use(API_ROUTES.AI, aiLimiter); // Apply AI specific limiter

// Connect to MongoDB
const mongoUri = process.env.MONGODB_URI || process.env.MONGO_URI; // Fallback for MONGO_URI
mongoose.set('strictQuery', true);

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(mongoUri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      bufferCommands: false
    });
    console.log(`✅ MongoDB connected: ${conn.connection.host}`);
  } catch (error) {
    console.error('❌ MongoDB connection error:', error.message);
    process.exit(1); // Exit process on DB connection failure
  }
};

console.log('🔧 Connecting to MongoDB...');
connectDB();
console.log('🔧 API_ROUTES object:', JSON.stringify(API_ROUTES, null, 2));

// Import auth middleware (needed for protected routes)
const authMiddleware = require('./middleware/authMiddleware'); // Moved up to just before route loading

// Route loading with enhanced debugging
console.log('🔧 Loading API routes...');
// Define all routes and their respective files
const routeFiles = [
  { path: API_ROUTES.AUTH, file: './routes/auth', needsAuth: false },
  { path: API_ROUTES.USER, file: './routes/user', needsAuth: false }, // User specific data, auth handled in user.js
  { path: API_ROUTES.PAYMENTS, file: './routes/payments', needsAuth: false },
  { path: API_ROUTES.SERVICES, file: './routes/services', needsAuth: false }, // General service info like voices
  { path: API_ROUTES.JOBS, file: './routes/jobs', needsAuth: false }, // Job status polling, specific job checks might be authenticated
{ path: API_ROUTES.CAPTION, file: './routes/caption', needsAuth: false },

  // AI Generation Routes - ALL require authentication and credit checks
  { path: API_ROUTES.AI, file: './routes/ai', needsAuth: true }, // General AI tools (text, image, ideas)
  { path: API_ROUTES.BLOG, file: './routes/blog', needsAuth: true },
  { path: API_ROUTES.CAPTION, file: './routes/caption', needsAuth: true },
  { path: API_ROUTES.COMMERCIAL, file: './routes/commercial', needsAuth: true }, // Stub, but will have AI tools
  { path: API_ROUTES.FLYER, file: './routes/flyer', needsAuth: true },
  { path: API_ROUTES.FOOD_PROMOS, file: './routes/foodpromos', needsAuth: true },
  { path: API_ROUTES.IMAGE_TO_IMAGE, file: './routes/imageToImage', needsAuth: true },
  { path: API_ROUTES.SOCIAL_MEDIA, file: './routes/social-media', needsAuth: true },
  { path: API_ROUTES.TEXT_TO_IMAGE, file: './routes/textToImage', needsAuth: true },
  { path: API_ROUTES.TEXT_TO_VIDEO, file: './routes/textToVideo', needsAuth: true },
  { path: API_ROUTES.TOURS, file: './routes/tours', needsAuth: true },
  { path: API_ROUTES.VIDEOS, file: './routes/videos', needsAuth: true },
  { path: API_ROUTES.VOICE, file: './routes/voice', needsAuth: true },
  // { path: API_ROUTES.REAL_ESTATE, file: './routes/real-estate', needsAuth: true }, // Uncomment if you add this
];

// Apply routes and conditional middleware
for (const { path, file, needsAuth } of routeFiles) {
  try {
    console.log(`🔧 Loading route: ${path} -> ${file}`);
    if (!path || typeof path !== 'string' || !path.startsWith('/')) {
      throw new Error(`Invalid route path: ${path}`);
    }
    const route = require(file);
    if (typeof route !== 'function') {
      throw new Error(`Route is not a function: ${typeof route}`);
    }

    // Apply authMiddleware if 'needsAuth' is true for the route
    if (needsAuth) {
      app.use(path, authMiddleware, route);
      console.log(`✅ Loaded route ${path} -> ${file} (Protected)`);
    } else {
      app.use(path, route);
      console.log(`✅ Loaded route ${path} -> ${file}`);
    }
  } catch (err) {
    console.warn(`⚠️ Failed to load route ${path} from ${file}: ${err.message}`);
    console.error('Stack trace:', err.stack);
    process.exit(1); // Exit on critical route loading failure
  }
}

console.log('🔧 API routes loaded, setting up frontend serving...');

// Serve static frontend files from Vite build (AFTER API routes are defined)
// This should handle the root route '/' and any sub-routes your React app handles.
app.use(express.static(path.join(__dirname, '../frontend/dist')));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// React Router fallback - serve index.html for any non-API or non-static-file routes
// This MUST be the very last middleware before the 404 middleware.
app.use((req, res, next) => { // FIXED: Changed from app.get('*', ...) to app.use(...)
  // Exclude API routes and known static paths from being served as index.html
  if (req.originalUrl.startsWith('/api') || req.originalUrl.startsWith('/uploads') || req.originalUrl.startsWith('/temp')) {
    return next(); // Let Express continue to process or fall through to 404
  }
  console.log(`🔧 Serving React app for: ${req.originalUrl}`);
  res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));
});

// 404 fallback for API routes that weren't found or other unhandled requests
// This MUST be the very last middleware.
app.use((req, res) => {
  console.log(`🔧 404 fallback hit for: ${req.originalUrl}`);
  res.status(404).json({ success: false, message: 'Route not found' });
});


console.log('🔧 Starting server...');

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
  console.log('🔧 Server startup complete!');
  console.log(`📱 Frontend available at: http://localhost:${PORT}`);
  console.log(`🔌 API endpoints available at: http://localhost:${PORT}/api/*`);
});
require('./workers/videoWorker');
