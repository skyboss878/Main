require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

const app = express();

// Middleware
app.use(helmet());
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true,
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use('/api', rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

// MongoDB connection
if (process.env.MONGODB_URI) {
  mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('✅ MongoDB connected'))
    .catch(err => {
      console.error('❌ MongoDB connection error:', err.message);
      process.exit(1);
    });
} else {
  console.error('❌ MONGODB_URI not found in environment variables');
  process.exit(1);
}

// Health Check
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Load Routes One-by-One to Debug
try {
  app.use('/api/auth', require('./routes/auth'));
  console.log('✅ auth route loaded');
} catch (e) {
  console.error('❌ Failed to load auth route:', e.message);
}

try {
  app.use('/api/videos', require('./routes/videos'));
  console.log('✅ videos route loaded');
} catch (e) {
  console.error('❌ Failed to load videos route:', e.message);
}

try {
  app.use('/api/payments', require('./routes/payments'));
  console.log('✅ payments route loaded');
} catch (e) {
  console.error('❌ Failed to load payments route:', e.message);
}

try {
  app.use('/api/ai', require('./routes/ai'));
  console.log('✅ ai route loaded');
} catch (e) {
  console.error('❌ Failed to load ai route:', e.message);
}

try {
  app.use('/api/tours', require('./routes/tours'));
  console.log('✅ tours route loaded');
} catch (e) {
  console.error('❌ Failed to load tours route:', e.message);
}

// 404 and Error Handlers
app.use((req, res) => {
  res.status(404).json({ success: false, message: 'Route not found' });
});
app.use((err, req, res, next) => {
  console.error('❌ Uncaught error:', err.stack);
  res.status(500).json({ success: false, message: 'Internal server error' });
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Temp server running at http://0.0.0.0:${PORT}`);
});



