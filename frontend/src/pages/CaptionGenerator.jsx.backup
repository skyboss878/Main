import React, { useState } from 'react';,
import { Upload, Wand2, Copy, Download, ImageIcon, Sparkles, Loader2 } from 'lucide-react';,
import { api } from '../utils/api';,

const CaptionGenerator = () => {,
  const [image, setImage] = useState(null);,
  const [imagePreview, setImagePreview] = useState(null);,
  const [caption, setCaption] = useState('');,
  const [loading, setLoading] = useState(false);,
  const [error, setError] = useState('');,
  const [captionStyle, setCaptionStyle] = useState('engaging');,

  const captionStyles = {,
    engaging: 'Engaging and fun',
    professional: 'Professional and clean',
    funny: 'Funny and witty',
    inspirational: 'Inspirational and motivating',
    casual: 'Casual and conversational',
    trendy: 'Trendy with hashtags',
  };,

  const handleImageUpload = (event) => {,
    const file = event.target.files[0];,
    if (file) {,
      if (file.size > 10 * 1024 * 1024) { // 10MB limit,
        setError('Image size must be less than 10MB');,
        return;,
      },
 ,
      setImage(file);,
      setError('');,
 ,
      // Create preview,
      const reader = new FileReader();,
      reader.onload = (e) => {,
        setImagePreview(e.target.result);,
      };,
      reader.readAsDataURL(file);,
    },
  };,

  const generateCaption = async () => {,
    if (!image) {,
      setError('Please upload an image first');,
      return;,
    },

    setLoading(true);,
    setError('');,

    try {,
      const formData = new FormData();,
      formData.append('image', image);,
      formData.append('style', captionStyle);,


// In the component:,
const response = await api.generateCaption(input); // Remove this line,
// Replace the entire fetch call with:,
const data = await api.generateCaption(input);,
setResult(data.data.caption), {,
        method: 'POST',
        body: formData,
      });,

      const data = await response.json();,

      if (data.success) {,
        setCaption(data.caption);,
      } else {,
        setError(data.message || 'Failed to generate caption');,
      },
    } catch (err) {,
      setError('Network error. Please try again.');,
      console.error('Caption generation error:', err);,
    } finally {,
      setLoading(false);,
    },
  };,

  const copyCaption = () => {,
    navigator.clipboard.writeText(caption);,
    // You could add a toast notification here,
  };,

  const downloadCaption = () => {,
    const element = document.createElement('a');,
    const file = new Blob([caption], { type: 'text/plain' });,
    element.href = URL.createObjectURL(file);,
    element.download = 'caption.txt';,
    document.body.appendChild(element);,
    element.click();,
    document.body.removeChild(element);,
  };,

  const clearAll = () => {,
    setImage(null);,
    setImagePreview(null);,
    setCaption('');,
    setError('');,
  };,

  return (,
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4">,
      <div className="max-w-4xl mx-auto">,
        {/* Header */},
        <div className="text-center mb-8">,
          <div className="flex items-center justify-center gap-3 mb-4">,
            <div className="p-3 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full">,
              <Sparkles className="w-8 h-8 text-white" />,
            </div>,
            <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">,
              AI Caption Generator,
            </h1>,
          </div>,
          <p className="text-gray-600 text-lg">,
            Transform your images into engaging captions with the power of AI,
          </p>,
        </div>,

        <div className="grid lg:grid-cols-2 gap-8">,
          {/* Left Column - Image Upload */},
          <div className="space-y-6">,
            <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-100">,
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">,
                <ImageIcon className="w-5 h-5 text-purple-500" />,
                Upload Image,
              </h2>,
 ,
              {!imagePreview ? (,
                <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-purple-400 transition-colors">,
                  <input,
                    type="file",
                    accept="image/*",
                    onChange={handleImageUpload},
                    className="hidden",
                    id="image-upload",
                  />,
                  <label htmlFor="image-upload" className="cursor-pointer">,
                    <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />,
                    <p className="text-gray-600 mb-2">Click to upload an image</p>,
                    <p className="text-sm text-gray-400">PNG, JPG, GIF up to 10MB</p>,
                  </label>,
                </div>,
              ) : (,
                <div className="relative">,
                  <img,
                    src={imagePreview},
                    alt="Preview",
                    className="w-full h-64 object-cover rounded-xl",
                  />,
                  <button,
                    onClick={clearAll},
                    className="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors",
                  >,
                    Ã—,
                  </button>,
                </div>,
              )},
            </div>,

            {/* Caption Style Selection */},
            <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-100">,
              <h3 className="text-lg font-semibold mb-4">Caption Style</h3>,
              <div className="grid grid-cols-2 gap-3">,
                {Object.entries(captionStyles).map(([key, label]) => (,
                  <button,
                    key={key},
                    onClick={() => setCaptionStyle(key)},
                    className={`p-3 rounded-lg border-2 transition-all ${,
                      captionStyle === key,
                        ? 'border-purple-500 bg-purple-50 text-purple-700',
                        : 'border-gray-200 hover:border-gray-300',
                    }`},
                  >,
                    {label},
                  </button>,
                ))},
              </div>,
            </div>,

            {/* Generate Button */},
            <button,
              onClick={generateCaption},
              disabled={!image || loading},
              className="w-full bg-gradient-to-r from-purple-500 to-blue-500 text-white py-4 rounded-xl font-semibold text-lg hover:from-purple-600 hover:to-blue-600 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2",
            >,
              {loading ? (,
                <>,
                  <Loader2 className="w-5 h-5 animate-spin" />,
                  Generating Caption...,
                </>,
              ) : (,
                <>,
                  <Wand2 className="w-5 h-5" />,
                  Generate Caption,
                </>,
              )},
            </button>,
          </div>,

          {/* Right Column - Caption Output */},
          <div className="space-y-6">,
            <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-100">,
              <div className="flex items-center justify-between mb-4">,
                <h2 className="text-xl font-semibold">Generated Caption</h2>,
                {caption && (,
                  <div className="flex gap-2">,
                    <button,
                      onClick={copyCaption},
                      className="p-2 text-gray-500 hover:text-purple-500 transition-colors",
                      title="Copy caption",
                    >,
                      <Copy className="w-5 h-5" />,
                    </button>,
                    <button,
                      onClick={downloadCaption},
                      className="p-2 text-gray-500 hover:text-purple-500 transition-colors",
                      title="Download caption",
                    >,
                      <Download className="w-5 h-5" />,
                    </button>,
                  </div>,
                )},
              </div>,

              {error && (,
                <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-4">,
                  {error},
                </div>,
              )},

              {caption ? (,
                <div className="bg-gray-50 p-4 rounded-lg min-h-32">,
                  <p className="text-gray-800 leading-relaxed whitespace-pre-wrap">,
                    {caption},
                  </p>,
                </div>,
              ) : (,
                <div className="bg-gray-50 p-8 rounded-lg text-center text-gray-500 min-h-32 flex items-center justify-center">,
                  <div>,
                    <Sparkles className="w-8 h-8 mx-auto mb-2 text-gray-400" />,
                    <p>Upload an image and click "Generate Caption" to get started</p>,
                  </div>,
                </div>,
              )},
            </div>,

            {/* Tips */},
            <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-6 border border-purple-100">,
              <h3 className="text-lg font-semibold mb-3 text-purple-800">ðŸ’¡ Tips for Better Captions</h3>,
              <ul className="space-y-2 text-sm text-purple-700">,
                <li>â€¢ Use high-quality, clear images for better results</li>,
                <li>â€¢ Choose the caption style that matches your brand</li>,
                <li>â€¢ Images with people or clear subjects work best</li>,
                <li>â€¢ Try different styles to find your perfect tone</li>,
              </ul>,
            </div>,
          </div>,
        </div>,
      </div>,
    </div>,
  );,
};,

export default CaptionGenerator;,
